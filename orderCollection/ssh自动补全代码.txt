1. 插件官网地址
    官网: http://mimosa-pudica.net/zsh-incremental.html
2. 插件incr-0.2.zsh代码

                  # Incremental completion for zsh
                  # by y.fujii <y-fujii at mimosa-pudica.net>, public domain


                  autoload -U compinit
                  zle -N self-insert self-insert-incr
                  zle -N vi-cmd-mode-incr
                  zle -N vi-backward-delete-char-incr
                  zle -N backward-delete-char-incr
                  zle -N expand-or-complete-prefix-incr
                  compinit

                  bindkey -M viins '^[' vi-cmd-mode-incr
                  bindkey -M viins '^h' vi-backward-delete-char-incr
                  bindkey -M viins '^?' vi-backward-delete-char-incr
                  bindkey -M viins '^i' expand-or-complete-prefix-incr
                  bindkey -M emacs '^h' backward-delete-char-incr
                  bindkey -M emacs '^?' backward-delete-char-incr
                  bindkey -M emacs '^i' expand-or-complete-prefix-incr

                  unsetopt automenu
                  compdef -d scp
                  compdef -d tar
                  compdef -d make
                  compdef -d java
                  compdef -d svn
                  compdef -d cvs

                  # TODO:
                  #     cp dir/

                  now_predict=0

                  function limit-completion
                  {
                    if ((compstate[nmatches] <= 1)); then
                        zle -M ""
                    elif ((compstate[list_lines] > 6)); then
                        compstate[list]=""
                        zle -M "too many matches."
                    fi
                  }

                  function correct-prediction
                  {
                    if ((now_predict == 1)); then
                        if [[ "$BUFFER" != "$buffer_prd" ]] || ((CURSOR != cursor_org)); then
                            now_predict=0
                        fi
                    fi
                  }

                  function remove-prediction
                  {
                    if ((now_predict == 1)); then
                        BUFFER="$buffer_org"
                        now_predict=0
                    fi
                  }

                  function show-prediction
                  {
                    # assert(now_predict == 0)
                    if
                        ((PENDING == 0)) &&
                        ((CURSOR > 1)) &&
                        [[ "$PREBUFFER" == "" ]] &&
                        [[ "$BUFFER[CURSOR]" != " " ]]
                    then
                        cursor_org="$CURSOR"
                        buffer_org="$BUFFER"
                        comppostfuncs=(limit-completion)
                        zle complete-word
                        cursor_prd="$CURSOR"
                        buffer_prd="$BUFFER"
                        if [[ "$buffer_org[1,cursor_org]" == "$buffer_prd[1,cursor_org]" ]]; then
                            CURSOR="$cursor_org"
                            if [[ "$buffer_org" != "$buffer_prd" ]] || ((cursor_org != cursor_prd)); then
                                now_predict=1
                            fi
                        else
                            BUFFER="$buffer_org"
                            CURSOR="$cursor_org"
                        fi
                        echo -n "\e[32m"
                    else
                        zle -M ""
                    fi
                  }

                  function preexec
                  {
                    echo -n "\e[39m"
                  }

                  function vi-cmd-mode-incr
                  {
                    correct-prediction
                    remove-prediction
                    zle vi-cmd-mode
                  }

                  function self-insert-incr
                  {
                    correct-prediction
                    remove-prediction
                    if zle .self-insert; then
                        show-prediction
                    fi
                  }

                  function vi-backward-delete-char-incr
                  {
                    correct-prediction
                    remove-prediction
                    if zle vi-backward-delete-char; then
                        show-prediction
                    fi
                  }

                  function backward-delete-char-incr
                  {
                    correct-prediction
                    remove-prediction
                    if zle backward-delete-char; then
                        show-prediction
                    fi
                  }

                  function expand-or-complete-prefix-incr
                  {
                    correct-prediction
                    if ((now_predict == 1)); then
                        CURSOR="$cursor_prd"
                        now_predict=0
                        comppostfuncs=(limit-completion)
                        zle list-choices
                    else
                        remove-prediction
                        zle expand-or-complete-prefix
                    fi
                  }

3. 如何使用

    首先去你官网或者从上面把这个 shell 文件内容copy 下来,然后放到一个指定的目录下.

    该放到什么目录下,这个看你的个人爱好,我推荐你放在 oh-my-zsh 目录的插件目录下

    ➜  /Users/zhangzhi  >.oh-my-zsh/plugins/

    然后新建一个 incr 目录,最后在 incr 目录下创建一个shell 文档,把你copy 的内容放进去.

    上面的操作有几个注意点: 创建文件夹用sudo 权限.

    创建完的 shell 文档要给赋 777 权限

    然后插入一句下面的 shell 脚本:

    ➜  /Users/zhangzhi/.oh-my-zsh/plugins/incr git:(master) ✗ >ls
    incr-0.2.zsh

    然后是配置 .zshrc 文件:

    ➜  /Users/zhangzhi  >nano .zshrc

    然后插入一句下面的 shell 脚本:

    source ~/.oh-my-zsh/plugins/incr/incr*.zsh

    然后保存 .zshrc 配置文件,这时如果你想让它立即生效

    ➜  /Users/zhangzhi  >source .zshrc

    这样就可以了.其他 shell 窗口可以关闭重新打开及有了补全提示.

    它不仅仅是对指令的补全,而且也会补全路径,文件名,最重要的是实时的,掌握好你的 tab 键,去飞吧!